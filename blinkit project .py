# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pmBcZkxT77VgwznBkk4f2sfiv5x-f_EN

### Data analysis pyhton project : Blinkit analysis
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("blinkit_data.csv")

df

df.head(20)

df.shape

print("size of Data:", df.shape)

df.columns

df.dtypes

print(df['Item Fat Content'].unique())

df['Item Fat Content'] = df['Item Fat Content'].replace({'LF': 'Low Fat',
                                                         'low fat': 'LOW Fat',
                                                         'reg' : 'Regular'
                                                         })

print(df['Item Fat Content'].unique())

"""- Business Requirements :
- KPI's Requirements
"""

### Total Sales
total_sales = df['Sales'].sum()

### Average Sales
avg_sales = df['Sales'].mean()

### No pf Items sold
no_of_items_sold = df['Sales'].count()

### Display

print(f"Total Sales: ${total_sales:,.0f}")
print(f"Average Sales: ${avg_sales:,.0f}")
print(f"No of Items Sold: {no_of_items_sold:,.0f}")
print(f"Average Ratings: {no_of_items_sold:,.0f}")

"""### Charts Requirements:
- TOtal Sales by Fat Content
"""

sales_by_fat = df.groupby('Item Fat Content')['Sales'].sum()

plt.pie(sales_by_fat, labels = sales_by_fat.index,
                         autopct = '%.1f%%',
                        startangle = 90)

plt.title('Sales by Fat Content')
plt.axis('equal')
plt.show()

"""### Total Sales by Item Type:"""

sales_by_type = df.groupby('item_type')['sales'].sum().sort_values(ascending=False)

plt.figure(figsize=(10,6))
bars = plt.bar(sales_by_type.index, sales_by_type.values)

plt.xticks(rotation=90)
plt.xlabel('Item Type')
plt.ylabel('Total Sales')
plt.title('Total Sales by Item Type')

for bar in bars:
    plt.text(bar.get_x() + bar.get_width() / 2,
             bar.get_height(),
             f'{bar.get_height():,.0f}',
             ha='center', va='bottom', fontsize=8)

plt.tight_layout()
plt.show()

"""### Fat Content by Outlet for Total Sales"""

grouped = df.groupby(['Outlet Location Type', 'Item Fat Content'])['Sales'].sum().unstack()
grouped = grouped[['Regular', 'Low Fat']]

ax = grouped.plot(kind='bar', figsize=(8, 5), title='Outlet Tier by Item Fat Content')
plt.xlabel('Outlet Location Tier')
plt.ylabel('Total Sales')
plt.legend(title='Item Fat content')
plt.tight_layout()
plt.show()

"""### Total Sales by Outlet Establishment"""

sales_by_year = df.groupby('outlet_establishment_year')['sales'].sum().sort_index()

plt.figure(figsize=(9,5))
plt.plot(sales_by_year.index, sales_by_year.values, marker='o', linestyle='-')

plt.xlabel('Outlet Establishment Year')
plt.ylabel('Total Sales')
plt.title('Outlet Establishment')

for x, y in zip(sales_by_year.index, sales_by_year.values):
    plt.text(x, y, f'{y:,.0f}', ha='center', va='bottom', fontsize=8)

plt.tight_layout()
plt.show()

"""### Sales by outer size"""

sales_by_size = df.groupby('outlet_size')['sales'].sum()

plt.figure(figsize=(4, 4))
plt.pie(sales_by_size, labels=sales_by_size.index, autopct='%1.1f%%', startangle=90)
plt.title('Outlet Size')
plt.tight_layout()
plt.show()